'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Precisely
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
'**default constants...
Include "Library\Defaults.def"

'-------------------------------------
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\OBJLib.def"

Include "DLGIsoscelesTrapez.def"

Define	CTRL_TXT_X			50
Define	CTRL_TXT_Y			60
Define	CTRL_TXT_DIRECTION		100
Define	CTRL_TXT_LENGTH		200
Define	CTRL_TXT_WIDTHATSTART	300
Define	CTRL_TXT_WIDTHATEND		400
Define	CTRL_LST_CALC_METHOD	500
Define	CTRL_CHK_MIDPOINTNODE	600

Declare Sub DLGIT_Unload

Dim	mfX, mfY, mfDirection, mfLength, mfWidthAtStart, mfWidthAtEnd As Float,
	mnCalculationMethod As Integer,
	mbAddMidPointNode As Logical
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGIsoscelesTrapez(	  ByVal fX As Float					'Default location X to show in dialog
						, ByVal fY As Float					'Default location Y to show in dialog
						, ByVal fDirection As Float			'Use -1 to use last used direction
						, ByVal fLength As Float				'Use -1 to use last used length
						, ByVal fWidthAtStart As Float		'Use -1 to use last used width at start
						, ByVal fWidthAtEnd As Float			'Use -1 to use last used width at end
						, ByVal nCalculationMethod As Float	'Default calculation method at end to show in dialog, -1 to use default
						) As Logical

OnError GoTo ErrorOccured

DLGIsoscelesTrapez = FALSE

	mfX = fX
	mfY = fY
	If fDirection > 0 Then
		mfDirection	= fDirection
	End If
	If fLength > 0 Then
		mfLength		= fLength
	End If
	If fWidthAtStart > 0 Then
		mfWidthAtStart = fWidthAtStart
	End If
	If fWidthAtEnd > 0 Then
		mfWidthAtEnd = fWidthAtEnd
	End If
	If nCalculationMethod > 0 Then
		mnCalculationMethod	= nCalculationMethod
	End If

	Dialog
		Title "Isoceles Trapezoid"

		Control StaticText	Position 5,5
			Title "Initial location (X, Y)"
		Control EditText	Position 25,15			ID CTRL_TXT_X
			Width 70
			Value FormatNumber$(mfX)
		Control EditText	Position 100,15		ID CTRL_TXT_Y
			Width 70
			Value FormatNumber$(mfY)


		Control StaticText	Position 5,30
			Title "Direction, 360 degrees"
		Control EditText	Position 120,28		ID CTRL_TXT_DIRECTION
			Width 50
			Value FormatNumber$(mfDirection)

		Control StaticText	Position 5,45
			Title "Length, meters"
		Control EditText	Position 120,43		ID CTRL_TXT_LENGTH
			Width 50
			Value FormatNumber$(mfLength)

		Control StaticText	Position 5,60
			Title "Width at Start, meters"
		Control EditText	Position 120,58		ID CTRL_TXT_WIDTHATSTART
			Width 50
			Value FormatNumber$(mfWidthAtStart)

		Control StaticText	Position 5,75
			Title "Width at End, meters"
		Control EditText	Position 120,73		ID CTRL_TXT_WIDTHATEND
			Width 50
			Value FormatNumber$(mfWidthAtEnd)

		Control GroupBox	Position 5,90
			Width 165		Height 40
			Title "Calculation Method"
		Control RadioGroup	Position 15,100		ID CTRL_LST_CALC_METHOD
			Title "Cartesian;Spherical"
			Value DLGITGetCalculationMethod()

		Control CheckBox	Position 5,140			ID CTRL_CHK_MIDPOINTNODE
			Title "Add Node at center of parallel sides"
			Value mbAddMidPointNode

		Control OKButton
			Calling DLGIT_Unload
		Control CancelButton

	If not CommandInfo(CMD_INFO_DLG_OK) Then
		Exit Function
	End If

	DLGIsoscelesTrapez = TRUE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGIsoscelesTrapez")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DLGIT_Unload

OnError GoTo ErrorOccured

	mfX				= DeformatNumber$(ReadControlValue(CTRL_TXT_X))
	mfY				= DeformatNumber$(ReadControlValue(CTRL_TXT_Y))
	mfDirection		= DeformatNumber$(ReadControlValue(CTRL_TXT_DIRECTION))
	mfLength			= DeformatNumber$(ReadControlValue(CTRL_TXT_LENGTH))
	mfWidthAtStart		= DeformatNumber$(ReadControlValue(CTRL_TXT_WIDTHATSTART))
	mfWidthAtEnd		= DeformatNumber$(ReadControlValue(CTRL_TXT_WIDTHATEND))
	mnCalculationMethod	= ReadControlValue(CTRL_LST_CALC_METHOD)
	mbAddMidPointNode	= ReadControlValue(CTRL_CHK_MIDPOINTNODE)

	If mfDirection < 0 Or mfDirection > 360 Then
		Note "Please enter a direction between 0 and 360 degrees!"
		Alter Control CTRL_TXT_DIRECTION Active
		Dialog Preserve
		Exit Sub
	End If
	If mfLength <= 0 Then
		Note "Please enter a length larger than 0 meters!"
		Alter Control CTRL_TXT_DIRECTION Active
		Dialog Preserve
		Exit Sub
	End If
	If mfWidthAtStart < 0 Then
		Note "Please enter a width at start larger than or equal to 0 meters!"
		Alter Control CTRL_TXT_WIDTHATSTART Active
		Dialog Preserve
		Exit Sub
	End If
	If mfWidthAtEnd < 0 Then
		Note "Please enter a width at end larger than or equal to 0 meters!"
		Alter Control CTRL_TXT_WIDTHATEND Active
		Dialog Preserve
		Exit Sub
	End If
	If mfWidthAtEnd = 0 And mfWidthAtStart = 0 Then
		Note "Please enter a width at start or at end larger than 0 meters!"
		Alter Control CTRL_TXT_WIDTHATSTART Active
		Dialog Preserve
		Exit Sub
	End If
	If not mnCalculationMethod in (CALC_METHOD_SPERICAL, CALC_METHOD_CARTESIAN) Then
		Note "Please specify a calculation method!"
		Alter Control CTRL_LST_CALC_METHOD Active
		Dialog Preserve
		Exit Sub
	End If


	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGIT_Unload")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGITGetX() As Float

OnError GoTo ErrorOccured

	DLGITGetX = mfX
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGITGetX")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGITGetY() As Float

OnError GoTo ErrorOccured

	DLGITGetY = mfY
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGITGetY")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGITGetDirection() As Float

OnError GoTo ErrorOccured

	DLGITGetDirection = mfDirection
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGITGetDirection")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGITGetLength() As Float

OnError GoTo ErrorOccured

	DLGITGetLength = mfLength
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGITGetLength")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGITGetWidthAtStart() As Float

OnError GoTo ErrorOccured

	DLGITGetWidthAtStart = mfWidthAtStart
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGITGetWidthAtStart")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGITGetWidthAtEnd() As Float

OnError GoTo ErrorOccured

	DLGITGetWidthAtEnd = mfWidthAtEnd
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGITGetWidthAtEnd")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGITAddMidPointNode() As Logical	'Determines if the trapez should have a node at the mid point on the parallel sides

OnError GoTo ErrorOccured

	DLGITAddMidPointNode = mbAddMidPointNode
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGITAddMidPointNode")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGITGetCalculationMethod() As Integer ''CALC_METHOD_CARTESIAN / CALC_METHOD_SPERICAL

OnError GoTo ErrorOccured

	If not mnCalculationMethod = CALC_METHOD_SPERICAL Then
		'**Defaults to Cartesian unless the user has chosed Spherical
		mnCalculationMethod = CALC_METHOD_CARTESIAN
	End If

	DLGITGetCalculationMethod = mnCalculationMethod
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGITGetCalculationMethod")
	Call ERRShow()

End Function
