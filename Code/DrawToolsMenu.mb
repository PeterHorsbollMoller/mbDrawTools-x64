'*******************************************************************************
'**   Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'** 	Program:	DrawTools
'** 	Modul:	DrawToolsMenu.mb
'**
'*******************************************************************************
'	12-01-2011 14:07:37	1.01		Added extra tools:
'							- Add new start node
'							- Add new end node
'							- Add node at either end or start, depends on which is closest
'							- Remove start node
'							- Remove end node
'	12-01-2011 15:56:07	1.02		Added extra tool
'							- combine selected into new object in editable layer
'	13-09-2011 08:42:11	1.03		Added extra tool
'							- add gaps into current editable table where clicked
'	11-04-2013 09:51:29	1.04		Minor changes, mostly cosmetic to the source code
'					2.00 	Included support for running DrawTools on 64 bit
'	19-01-2016 13:25:16 2.10 	Improved the precision on the tools by specifying the coordinate system of the table to edit and not the map or no coordsys
'	01-09-2018 23:27:18 2.20 	Added a tool that lets you set the xy coordinate of a node of a selected object
'	11-09-2018 07:36:31 2.30		Added a tool that can calculate angles between segments along a polyline or polygon
'	07-09-2020 15:32:35 2.40 	Rebranded the tool to Precisely
'	03-09-2021 08:04:52 2.50 	Added a tool that can draw arrows along a polyline at a given width
'							Added a tool that can draw rotated trapez
'	09-11-2021 13:36:44	2.53 	Recompiled with new libraries to remove Pitney Bowes brand
'	15-01-2022 23:17:45 2.60 	Added a tool to split a polygon into halfs using a baseline - not finished
'	06/10/2022 13.47.23 2.7.1	Added functions for creating annullus and Circular Sector in Update statements as an example
'							Added function for converting between math and north angles
'							Added Help file (PDF)
'							SetNodeCoordinate now also allows you to delete a node
'	16/05/2023 08.43.27 3.0.1	Added support for editing M & Z values through the Node Editing tool
'							Added tool for updating all Z or M values on selected records
'	01-06-2023 15:29:26	3.0.2	Removed call the OBJMZAddZSupport as Pro now can do this
'							Improved UpdateMZValue to also allow the user to select a column with values to use
'	06-06-2023 12:39:56	3.0.3	Exposed two new functions: DTCartesianOffsetXYZ and DTSphericalOffsetXYZ to offset an existing object in XYZ direction
'	07-06-2023 07:21:32 3.0.4	Exposed four new function to set and scale M/Z values on objects: DTObjectSetM, DTObjectSetZ, OBJMZScaleM, and OBJMZScaleZ
'	27-06-2023 11:36:23 3.0.5	Renamed OBJCreateAnnulus to OBJCreateAnnulusSector. An Annulus really just is a ring
'	30-06-2023 09:46:16	3.0.6	Added:
'								- DTExtractNodesSelection: Extracts nodes into a new nodes table
'								- DTUpdateZMUsingNodesTable: Updates nodes using points in a nodes table
'	16-08-2023 08:01:58 3.0.7	Added dialog to control updating MZ values using nodes: DLGUpdateZMUsingNodes
'							Added Dialog around OffsetXYZ to offset selected objects and/or create copies of selected objects through a line tool
'*******************************************************************************
'	Support objects with multiple sections in the Alter Nodes dialog
'	Delete current polygon/polyline section in the Alter Nodes dialog (https://ideas.precisely.com/ideas/MIPRO-I-70)
'	Tool for AnnulusSector and CircularSector to create it from a tool
'	Dialog for AnnulusSector and CircularSector to create it from a table
'	Create a arrow from a simple line or two points where the arrow is rounded off to the left or right side
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
'**default constants...
Include "Library\Defaults.def"

Define xProgram 		"DrawTools"
Define xProgramMenu		"DrawTools"
Define xVersion 		"3.0.7"
Define xYear			"2023"
Define xAddToMenuBar	FALSE

Define FILE_INI			GetFolderPath$(FOLDER_MI_PREFERENCE) & xProgram & ".ini"
Define FILE_DBG			ApplicationDirectory$() & xProgram & ".dbg"
'Define FILE_DLL			ApplicationDirectory$() & xProgram & ".dll"
Define FILE_HLP			ApplicationDirectory$() & xProgram & ".pdf"
Define FILE_PAD			GetFolderPath$(FOLDER_MI_PREFERENCE) & xProgram & ".btp"

'-------------------------------------
Include "Library\ProgramInfo.def"
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\RIBBONLib.def"
Include "Library\TABLELib.def"

Include "DrawTools.def"

'-----------------------------------------------------------------------------------------
Declare Sub Main
Declare Sub EndProgram

Declare Sub EndHandler
Declare Sub WinFocusChangedHandler
Declare Sub WinChangedHandler
Declare Sub SelChangedHandler

'**********************************************************************************************''
'**   Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'
'**********************************************************************************************''
Sub Main

Dim	nResult As Logical

OnError GoTo ErrorOccured

	'***Initializing ApplicationInfo
	Call PRGISetApplicationName(xProgram)
	Call PRGISetApplicationVersion(xVersion)
	Call PRGISetApplicationCopyrightYear(xYear)
	Call PRGISetApplicationHelpFile(FILE_HLP)

	Call PRGISetApplicationImageUri(ApplicationDirectory$() & "Images\IsoscelesTrapez_32.png")
	Call PRGISetDescription("The DrawTools application holds a number of tools for modifying existing objects and creating new objects.")

	'***Enabling Debug if file exists
	Call DEBUGEnableByFile(FILE_DBG)

	Call DTSetIconsFile("")

	If SystemInfo(SYS_INFO_MAPINFO_INTERFACE) = MIINTERFACE_CLASSICMENU Then
		'**This MapInfo Pro is using the classic menu and toolbar based interface
		Call DTAddToolsToButtonPad(TB_DRAWING, "")
	Else
		'**This MapInfo Pro is using the modern Ribbon based interface
		Call DTAddToolsToRibbon
	End If

	nResult = RBNRegisterFunctionAsPublic("OBJDirection", "DTLineDirection", "Calculates the direction of a polyline, East is zero, counter-clockwise")
	nResult = RBNRegisterFunctionAsPublic("OBJCreateTrapez", "DTCreateTrapez", "Creates a trapez using a starting point, direction, length, width at start and end, optional midpoint creation and calculation method (1=Cart, 2=Spher)")
	nResult = RBNRegisterFunctionAsPublic("OBJCreateTriangle", "DTCreateTriangle", "Creates a triangle using a starting point, direction, length, width, optional midpoint creation and calculation method (1=Cart, 2=Spher)")
	nResult = RBNRegisterFunctionAsPublic("OBJRemoveDuplicateNodes", "DTRemoveDuplicateNodes", "Removed duplicate nodes from input object using the given tolerance in meters")
	nResult = RBNRegisterFunctionAsPublic("OBJCreateAnnulusSector", "DTCreateAnnulusSector", "Create an annulus sector using a point, direction and sizes.")
	nResult = RBNRegisterFunctionAsPublic("OBJCreateCircularSector", "DTCreateCircularSector", "Create a circular sector using a point, direction and sizes.")
	nResult = RBNRegisterFunctionAsPublic("OBJCartesianCreateArrow", "DTCartesianCreateArrow", "Create an arrow from a polyline giving size and end types.")
	nResult = RBNRegisterFunctionAsPublic("MATHNorth2MathAngle", "DTNorth2MathAngle", "Converts a North angle to a Math angle.")
	nResult = RBNRegisterFunctionAsPublic("MathMath2NorthAngle", "DTMath2NorthAngle", "Converts a Math angle to a North angle.")

	If SystemInfo(SYS_INFO_MIVERSION) >= 2300 Then
		nResult = RBNRegisterFunctionAsPublic("OBJMZCartesianOffsetXYZ", "DTCartesianOffsetXYZ", "Cartesian Offsets an existing object by XYZ values using defined distance units.")
		nResult = RBNRegisterFunctionAsPublic("OBJMZSphericalOffsetXYZ", "DTSphericalOffsetXYZ", "Spherical Offsets an existing object by XYZ values using defined distance units.")

		nResult = RBNRegisterFunctionAsPublic("OBJMZSetM", "DTObjectSetM", "Sets the M value on an existing object to the given value.")
		nResult = RBNRegisterFunctionAsPublic("OBJMZSetZ", "DTObjectSetZ", "Sets the Z value on an existing object to the given value.")
		nResult = RBNRegisterFunctionAsPublic("OBJMZScaleM", "DTObjectScaleM", "Multiplies the M value on an existing object by the given value.")
		nResult = RBNRegisterFunctionAsPublic("OBJMZScaleZ", "DTObjectScaleZ", "Multiplies the Z value on an existing object by the given value.")
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "Main")
	Call ERRShow()

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'**   Ending MapBasic application
'****************************************
Sub EndProgram

OnError GoTo ErrorOccured

	End Program
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndProgram")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub EndHandler

OnError GoTo ErrorOccured

	If SystemInfo(SYS_INFO_MAPINFO_INTERFACE) = MIINTERFACE_RIBBON Then
		Call RBNEndHandler
	End If
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndHandler")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Sub WinFocusChangedHandler

OnError GoTo ErrorOccured

	Call DTWinFocusChangedHandler
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WinFocusChangedHandler")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Sub WinChangedHandler

OnError GoTo ErrorOccured

	Call DTWinChangedHandler
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WinChangedHandler")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Sub SelChangedHandler

OnError GoTo ErrorOccured

	Call DTSelChangedHandler
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "SelChangedHandler")
	Call ERRShow()

End Sub